{
  // Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Create div": {
    "prefix": "create-div",
    "body": ["document.createElement('div');"],
    "description": "Create div"
  },
  "Append node": {
    "prefix": "append-node",
    "body": ["document.body.appendChild($1)"],
    "description": "Create div"
  },
  "Add onclick": {
    "prefix": "add-onclick",
    "body": ["this.node.onclick = $1;"],
    "description": "Create div"
  },
  "Node classname": {
    "prefix": "node-classname",
    "body": [
      "this.node.className = cn('CatInput-overlay', {",
      " 'CatInput-overlay-displayed': this.state.displayed,",
      "});"
    ],
    "description": "Node classname"
  },
  "Fix event bubbling": {
    "prefix": "event-bubbling",
    "body": ["if (e.target.tagName === 'INPUT' && e.key !== 'Enter') return;"],
    "description": "Fix event bubbling"
  },
  "Add state": {
    "prefix": "add-state",
    "body": [
      "this.state = {",
      "\tcats: [],",
      "\taddCat: cat => {",
      "\t\tthis.state.addCats([cat]);",
      "\t},",
      "\taddCats: newCats => {",
      "\t\tthis.setState(({ cats, ...rest }) => {",
      "\t\t\treturn {",
      "\t\t\t\t...rest,",
      "\t\t\t\tcats: [...cats, ...newCats]",
      "\t\t\t};",
      "\t\t});",
      "\t},",
      "\tmoveCat: (source, target) => {",
      "\t\tthis.setState(({ cats, ...rest }) => {",
      "\t\t\tconst copy = [...cats];",
      "\t\t\tconst element = copy.splice(source, 1)[0];",
      "\t\t\tcopy.splice(target, 0, element);",
      "",
      "\t\t\treturn {",
      "\t\t\t\t...rest,",
      "\t\t\t\tcats: copy",
      "\t\t\t};",
      "\t\t});",
      "\t},",
      "\tsetCats: cats => {",
      "\t\tthis.setState({ cats });",
      "\t}",
      "};"
    ],
    "description": "Add state"
  },
  "Container class": {
    "prefix": "container-class",
    "body": [
      "export class AddCatContainer extends Component {",
      "\t$1",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t$2",
      "\t\t);",
      "\t}",
      "}"
    ],
    "description": "Container class"
  },
  "Container component": {
    "prefix": "container-component",
    "body": ["<AddCat addCat={$1} {...this.props} />"],
    "description": "Container class"
  }
}
